{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///workspace/frontend/src/app/api/voice/parse/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const backendUrl = process.env.BACKEND_URL || process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:4000';\n\n    const res = await fetch(`${backendUrl}/api/voice/parse`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n      // Avoid caching to ensure fresh AI responses\n      cache: 'no-store',\n    });\n\n    const json = await res.json().catch(() => ({ error: 'Invalid JSON from backend' }));\n    return NextResponse.json(json, { status: res.status });\n  } catch (err: any) {\n    return NextResponse.json({ error: 'Proxy error', details: err?.message }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,aAAa,QAAQ,GAAG,CAAC,WAAW,IAAI,QAAQ,GAAG,CAAC,uBAAuB,IAAI;QAErF,MAAM,MAAM,MAAM,MAAM,GAAG,WAAW,gBAAgB,CAAC,EAAE;YACvD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;YACrB,6CAA6C;YAC7C,OAAO;QACT;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC;gBAAE,OAAO;YAA4B,CAAC;QACjF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ,IAAI,MAAM;QAAC;IACtD,EAAE,OAAO,KAAU;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAe,SAAS,KAAK;QAAQ,GAAG;YAAE,QAAQ;QAAI;IAC1F;AACF","debugId":null}}]
}